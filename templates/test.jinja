<!DOCTYPE html>
<meta charset="utf-8">

<style type="text/css">
/* 13. Basic Styling with CSS */

/* Style the lines by removing the fill and applying a stroke */
.line {
    fill: none;
    stroke: #ffab00;
    stroke-width: 3;
}
  
.overlay {
  fill: none;
  pointer-events: all;
}

/* Style the dots by assigning a fill and stroke */
.dot {
    fill: #ffab00;
    stroke: #fff;
}
  
  .focus circle {
  fill: none;
  stroke: steelblue;
}

</style>
<!-- Body tag is where we will append our SVG and SVG objects-->
<body>
  <svg id="crop_height"></svg>
  <svg id="crop_diameter"></svg>
</body>

<!-- Load in the d3 library -->
<script src="https://d3js.org/d3.v5.min.js"></script>
  <script src="{{ url_for('static', filename='js/crop_graph.js')}}"></script>
<script>

// 2. Use the margin convention practice 
var margin = {top: 50, right: 50, bottom: 50, left: 50}
  , width = window.innerWidth / 2.0 - margin.left - margin.right // Use the window's width 
  , height = window.innerHeight - margin.top - margin.bottom; // Use the window's height

var dataset = {{ dataset | safe }};

var crop_data = dataset.crop;
var svg = d3.select("#crop_height").attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");



// 1. Add the SVG to the page and employ #2
var svg_diam = d3.select("#crop_diameter")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// 5. X scale will use the index of our data
var xScale = d3.scaleLinear()
    .domain([0, crop_data.length]) // input
    .range([0, width]); // output

draw_crop_graph(svg, crop_data, "height")
draw_crop_graph(svg_diam, crop_data, "diameter")

</script>
